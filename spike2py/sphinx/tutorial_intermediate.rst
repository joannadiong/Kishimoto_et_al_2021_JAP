Intermediate example
--------------------

We will re-use the data from the previous example and learn more about
:class:`~spike2py.SigInfo`, understand how directly create
:class:`~spike2py.Signal` objects (when exploring new data and debugging your code),
and better understand how :class:`~spike2py.Trial` simplifies things when
many signals were recorded.

Signals
~~~~~~~

Signal Information
##################

We will create :class:`~spike2py.SigInfo` ojbects to provide information about
each of the signals that were recorded. As described in the advanced example,
we can include information about how to filter or calibrate our signal, as well
as remove an offset. But for this first example we will include the minimum
information required.::

    import spike2py as spk2
    trig_info = spk2.SigInfo(name='trig_info', stype='trig', s2name='trig')
    emg_info = spk2.SigInfo(name='biceps', stype='sEMG', s2name='EMG')
    pressure_info = spk2.SigInfo(name='pressure', stype='waveform', s2name='signal')

For each signal we include:

* **name**: Informative name.
* **stype**: Signal type for spike2py (different to the signal types from Spike2).
  Tells :mod:`spike2py` how to import the signals and whether to perform some
  default signal processing (i.e. filtering, rectification and envolop for `sEMG`),
* **s2name**: Name of signal used when recording from Spike2.

Let's inspect the information related to our three signals:

>>> trig_info
SigInfo(name='trigger'
    stype='trig'
    s2name='trig'
    filt_cutoff=None,
    filt_order=None,
    filt_type=None,
    calib_slope=None,
    calib_offset=None,
    offset_type=None,
    offset_val=None,
    offset_sig='proc')
>>> emg_info
SigInfo(name='biceps',
    stype='sEMG',
    s2name='EMG',
    filt_cutoff=[20, 450],
    filt_order=4,
    filt_type='bandpass',
    calib_slope=None,
    calib_offset=None,
    offset_type=None,
    offset_val=None,
    offset_sig='proc')
>>> pressure_info
SigInfo(name='pressure',
    stype='waveform',
    s2name='signal',
    filt_cutoff=None,
    filt_order=None,
    filt_type=None,
    calib_slope=None,
    calib_offset=None,
    offset_type=None,
    offset_val=None,
    offset_sig='proc')

We can see that :class:`~spike2py.SigInfo` has several additional parameters
that we have not included; these are set to `None` by default. We can also see
that because we set `emg` to have `stype=sEMG`, :mod:`spike2py` automatically
created a 4th order butterworth band-pass filter of 20-450Hz. These values can
be overridden if required.

Signal Object
#############

The easiest way to import signals from data saved as at MATLAB file is to pass
one or more :class:`~spike2py.SigInfo` objects to :class:`~spike2py.Trial`. The
:class:`~spike2py.Trial` Class handles the details of opening the MATLAB file and
parsing out the data.

However, when starting out with :mod:`spike2py` or when debugging a problem, it
can be useful to know how to directly obtain a :class:`~spike2py.Signal`. Below
is a simple example of how this can be done::

    import os
    import scipy.io as sio
    import spike2py as spk2

We will use the `scipy.io` module to read our data from the MATLAB file::

    filename = 'max_push1.mat'
    file = os.path.join('.', 'tutorials', filename)
    data = sio.loadmat(file)

All the data from our trial in in `data`, a dictionary object of signals and
other information generated by `Spike2` about our trial and signals. For
our example, we will create a :class:`~spike2py.Signal` object for our trigger
signal. To do so we will again create a :class:`~spike2py.SigInfo`, and then pass
the information it contains to :class:`~spike2py.Signal`::

    trig_info = spk2.SigInfo(name='trig', stype='trig', s2name='trig')
    trig = spk2.Signal(sig=data[trig_info.s2name],
                       stype=trig_info.stype,
                       name=trig_info.name,
                       s2name=trig_info.s2name,
                       fs=trig_info.fs,
                       filtInfo=trig_info.filtInfo,
                       calibInfo=trig_info.calibInfo,
                       offsetInfo=trig_info.offsetInfo,
                       )

>>> trig
Signal(sig=sig, name='trig', s2name='trig', stype='trig')
>>> trig.name
'trig'
>>> trig.s2name
'trig'
>>> trig.stype
'trig'
>>> trig.times
array([[0.701],
       [3.501],
       [3.801],
       [4.701],
       [4.901],
       [5.101],
       [5.301],
       [5.501],
       [5.701],
       [5.901],
       [6.101],
       [6.301],
       [6.501]])


.. note::

   `trig` signals have their data --the time of the triggers-- in the `.times`
   attribute.

Now let's repeat the process for our pressure signal::

    pressure_info = spk2.SigInfo(name='pressure', stype='waveform', s2name='signal')
    pressure = spk2.Signal(sig=data[pressure_info.s2name],
                           stype=pressure_info.stype,
                           name=pressure_info.name,
                           s2name=pressure_info.s2name,
                           fs=pressure_info.fs,
                           filtInfo=pressure_info.filtInfo,
                           calibInfo=pressure_info.calibInfo,
                           offsetInfo=pressure_info.offsetInfo,
                           )

>>> pressure
Signal(sig=sig, name='pressure', s2name='signal', stype='waveform')
>>> pressure.fs
100
>>> pressure.times[0:10]
array([0.  , 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09])
>>> pressure.raw[0:10]
array([ 3.75823975e-01,  7.62939453e-04, -3.74450684e-01, -7.35626221e-01,
       -1.07086182e+00, -1.36871338e+00, -1.61758423e+00, -1.80999756e+00,
       -1.93664551e+00, -1.99569702e+00])

.. note::

    * Although we did not provide the sampling frequency (`fs`) of our pressure
      signal, :mod:`spike2py` retreived it from the information
      contained in information included in the the MATLAB file.
    * `waveform` signal types have their sample times in the `.times`
      attribute and their raw signal in the `.raw` attribute.

We will repeat the process one last time with our `emg` signal::

    emg_info = spk2.SigInfo(name='biceps', stype='sEMG', s2name='EMG')
    biceps = spk2.Signal(sig=data[emg_info.s2name],
                         stype=emg_info.stype,
                         name=emg_info.name,
                         s2name=emg_info.s2name,
                         fs=emg_info.fs,
                         filtInfo=emg_info.filtInfo,
                         calibInfo=emg_info.calibInfo,
                         offsetInfo=emg_info.offsetInfo,
                         )

>>> biceps
Signal(sig=sig, name='biceps', s2name='EMG', stype='sEMG')
>>> biceps.fs
2000
>>> biceps.filtInfo
FiltInfo(cutoff=[20, 450], order=4, type='bandpass')
>>> biceps.times[0:10]
array([0.    , 0.0005, 0.001 , 0.0015, 0.002 , 0.0025, 0.003 , 0.0035,
       0.004 , 0.0045])
>>> biceps.raw[0:10]
array([ 0.07934562,  0.10477691,  0.14546697,  0.10782866,  0.00050863,
       -0.13885483, -0.18615703, -0.1734414 , -0.18564841, -0.23193336])
>>> biceps.proc
array([-0.00761917,  0.03972988,  0.05797267,  0.01434539, -0.09089459,
       -0.20199386, -0.25804102, -0.26125151, -0.26601012, -0.30022137])
>>> biceps.rect[0:10]
array([0.07934562, 0.10477691, 0.14546697, 0.10782866, 0.00050863,
       0.13885483, 0.18615703, 0.1734414 , 0.18564841, 0.23193336])
>>> biceps.envel[0:10]
array([0.10978258, 0.10942789, 0.10907111, 0.10871227, 0.10835142,
       0.10798861, 0.10762387, 0.10725725, 0.10688879, 0.10651856])

.. note::

    * Although we did not provide the sampling frequency (`fs`) of our biceps
      emg signal, :mod:`spike2py` retreived it from the information
      contained in information included in the the MATLAB file.
    * Although we did not specify filter setting, the default is to apply a
      4th order 20-450Hz bandpass Butterworth filter on the raw data.
    * `sEMG` signal types have their sample times in the `.times`
      attribute and their raw signal in the `.raw` attribute.
    * `proc` contains the EMG signal after the mean has been removed and the
      default (or user specified) filter has been applied.
    * `rect` contains the rectified version of the `proc` signal.
    * `envel` contains the envelop of the rectified signal. The default settings
      use a 4th order 5Hz low-pass Butterworth filter, but the
      :class:`~spike2py.Signal.envelop` method can be re-run with a user-specified
      low-pass cut-off.

Trials
~~~~~~

As mentioned previously, it can get quite tiresome to write code to generate
individual :class:`~spike2py.Signal` objects for each of the signals your recorded.
Thankfully, we can use :class:`~spike2py.Trial` to do all the heavy lifting for
us, all we have to do is give it the right information.

Trial Information
#################

The first thing we need to do is create a :class:`~spike2py.TrialInfo`
objectrig_info. The code below is a continuation of our example, which means
we already created `trig_info`, `pressure_info` and `emg_info`.

>>> signals = [trig_info, pressure_info, emg_info]
>>> exp_cond = 'maximum pressure trial 1'
>>> path ='tutorials/'
>>> filename = 'max_push1.mat'
>>> trial_info = spike2py.TrialInfo(cond=exp_cond,
                                path=path,
                                filename=filename,
                                signals=signals,
                                )

:class:`~spike2py.TrialInfo` requires:

* **cond**: Informative name for trial.
* **path**: Path to where the Matlab data file is stored.
* **filename**: Filename of Matlab data file, with `.mat` extension.
* **signals**: List of :class:`~spike2py.SigInfo` objects.

Trial Object
############

Now that we have :class:`~spike2py.TrialInfo` describing our current trial, lets
pass it to :class:`~spike2py.Trial`

>>> trial = spike2py.Trial(trial_info)
trial
Trial(path='tutorials/', filename='max_push1.mat', cond='maximum pressure trial 1', sig=sig)
# signals in trial:
#	 trig
#	 biceps
#	 pressure
>>> trial.infoSignals
[SigInfo(name='trig',
 		stype='trig',
 		s2name='trig',
 		filt_cutoff=None,
 		filt_order=None,
 		filt_type=None,
 		calib_slope=None,
 		calib_offset=None,
 		offset_type=None,
 		offset_val=None,
        offset_sig='proc'),
SigInfo(name='biceps',
 		stype='sEMG',
 		s2name='EMG',
 		filt_cutoff=[20, 450],
 		filt_order=4,
 		filt_type='bandpass',
 		calib_slope=None,
 		calib_offset=None,
 		offset_type=None,
 		offset_val=None,
        offset_sig='proc'),
SigInfo(name='pressure',
 		stype='waveform',
 		s2name='signal',
 		filt_cutoff=None,
 		filt_order=None,
 		filt_type=None,
 		calib_slope=None,
 		calib_offset=None,
 		offset_type=None,
 		offset_val=None,
        offset_sig='proc')]

Similar to the basic tutorial, we can access our :class:`~spike2py.Signal` by
calling `trial.sig[sig_name]` and the various attributes we saw in the above
section discussing :class:`~spike2py.Signal`.

>>> trial.sig['trig']
Signal(sig=sig, name='trig', s2name='trig', stype='trig')
>>> trial.sig['pressure']
Signal(sig=sig, name='pressure', s2name='signal', stype='waveform')
>>> trial.sig['biceps']
Signal(sig=sig, name='biceps', s2name='EMG', stype='sEMG')
>>> trial.sig['trig'].times[0:10]
array([[0.701],
       [3.501],
       [3.801],
       [4.701],
       [4.901],
       [5.101],
       [5.301],
       [5.501],
       [5.701],
       [5.901]])
>>> pressure_times = trial.sig['pressure'].times[0:10]
>>> pressure_raw = trial.sig['pressure'].raw[0:10])
>>> [print(f'{t}, {p:4.2f}') for t, p in zip(pressure_times, pressure_raw]
 0.00,  0.38
 0.01,  0.00
 0.02, -0.37
 0.03, -0.74
 0.04, -1.07
 0.05, -1.37
 0.06, -1.62
 0.07, -1.81
 0.08, -1.94
 0.09, -2.00
